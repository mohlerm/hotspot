JAVA PROFILE 1.0.1, created Fri Jun 19 16:33:58 2015

Copyright (c) 2003, 2005, Oracle and/or its affiliates. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

  - Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

  - Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

  - Neither the name of Oracle nor the names of its
    contributors may be used to endorse or promote products derived
    from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


Header for -agentlib:hprof (or -Xrunhprof) ASCII Output (JDK 5.0 JVMTI based)

WARNING!  This file format is under development, and is subject to
change without notice.

This file contains the following types of records:

THREAD START
THREAD END      mark the lifetime of Java threads

TRACE           represents a Java stack trace.  Each trace consists
                of a series of stack frames.  Other records refer to
                TRACEs to identify (1) where object allocations have
                taken place, (2) the frames in which GC roots were
                found, and (3) frequently executed methods.

HEAP DUMP       is a complete snapshot of all live objects in the Java
                heap.  Following distinctions are made:

                ROOT    root set as determined by GC
                CLS     classes 
                OBJ     instances
                ARR     arrays

SITES           is a sorted list of allocation sites.  This identifies
                the most heavily allocated object types, and the TRACE
                at which those allocations occurred.

CPU SAMPLES     is a statistical profile of program execution.  The VM
                periodically samples all running threads, and assigns
                a quantum to active TRACEs in those threads.  Entries
                in this record are TRACEs ranked by the percentage of
                total quanta they consumed; top-ranked TRACEs are
                typically hot spots in the program.

CPU TIME        is a profile of program execution obtained by measuring
                the time spent in individual methods (excluding the time
                spent in callees), as well as by counting the number of
                times each method is called. Entries in this record are
                TRACEs ranked by the percentage of total CPU time. The
                "count" field indicates the number of times each TRACE 
                is invoked.

MONITOR TIME    is a profile of monitor contention obtained by measuring
                the time spent by a thread waiting to enter a monitor.
                Entries in this record are TRACEs ranked by the percentage
                of total monitor contention time and a brief description
                of the monitor.  The "count" field indicates the number of 
                times the monitor was contended at that TRACE.

MONITOR DUMP    is a complete snapshot of all the monitors and threads in 
                the System.

HEAP DUMP, SITES, CPU SAMPLES|TIME and MONITOR DUMP|TIME records are generated 
at program exit.  They can also be obtained during program execution by typing 
Ctrl-\ (on Solaris) or by typing Ctrl-Break (on Win32).

--------

THREAD START (obj=50000176, id = 200002, name="HPROF gc_finish watcher", group="system")
THREAD START (obj=50000176, id = 200001, name="main", group="main")
THREAD END (id = 200001)
THREAD START (obj=50000176, id = 200003, name="DestroyJavaVM", group="main")
THREAD END (id = 200003)
TRACE 301719:
	NoCompile.method1(NoCompile.java:Unknown line)
	NoCompile.main(NoCompile.java:Unknown line)
TRACE 301605:
	java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:Unknown line)
	java.lang.StringBuilder.append(StringBuilder.java:Unknown line)
	NoCompile.method1(NoCompile.java:Unknown line)
	NoCompile.main(NoCompile.java:Unknown line)
TRACE 301526:
	sun.nio.cs.UTF_8$Encoder.encodeArrayLoop(UTF_8.java:Unknown line)
	sun.nio.cs.UTF_8$Encoder.encodeLoop(UTF_8.java:Unknown line)
	java.nio.charset.CharsetEncoder.encode(CharsetEncoder.java:Unknown line)
	sun.nio.cs.StreamEncoder.implWrite(StreamEncoder.java:Unknown line)
TRACE 301549:
	java.io.FileOutputStream.write(FileOutputStream.java:Unknown line)
	java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:Unknown line)
	java.io.BufferedOutputStream.flush(BufferedOutputStream.java:Unknown line)
	java.io.PrintStream.write(PrintStream.java:Unknown line)
TRACE 301556:
	sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:Unknown line)
	sun.nio.cs.StreamEncoder.implFlushBuffer(StreamEncoder.java:Unknown line)
	sun.nio.cs.StreamEncoder.flushBuffer(StreamEncoder.java:Unknown line)
	java.io.OutputStreamWriter.flushBuffer(OutputStreamWriter.java:Unknown line)
TRACE 301533:
	sun.nio.cs.StreamEncoder.implWrite(StreamEncoder.java:Unknown line)
	sun.nio.cs.StreamEncoder.write(StreamEncoder.java:Unknown line)
	java.io.OutputStreamWriter.write(OutputStreamWriter.java:Unknown line)
	java.io.BufferedWriter.flushBuffer(BufferedWriter.java:Unknown line)
TRACE 301527:
	sun.nio.cs.UTF_8$Encoder.encodeLoop(UTF_8.java:Unknown line)
	java.nio.charset.CharsetEncoder.encode(CharsetEncoder.java:Unknown line)
	sun.nio.cs.StreamEncoder.implWrite(StreamEncoder.java:Unknown line)
	sun.nio.cs.StreamEncoder.write(StreamEncoder.java:Unknown line)
TRACE 301690:
	java.lang.ThreadLocal.get(ThreadLocal.java:Unknown line)
	sun.misc.FloatingDecimal.getBinaryToASCIIBuffer(FloatingDecimal.java:Unknown line)
	sun.misc.FloatingDecimal.getBinaryToASCIIConverter(FloatingDecimal.java:Unknown line)
	sun.misc.FloatingDecimal.getBinaryToASCIIConverter(FloatingDecimal.java:Unknown line)
TRACE 301502:
	java.nio.CharBuffer.arrayOffset(CharBuffer.java:Unknown line)
	sun.nio.cs.UTF_8.updatePositions(UTF_8.java:Unknown line)
	sun.nio.cs.UTF_8.access$200(UTF_8.java:Unknown line)
	sun.nio.cs.UTF_8$Encoder.encodeArrayLoop(UTF_8.java:Unknown line)
TRACE 301570:
	java.io.BufferedWriter.write(BufferedWriter.java:Unknown line)
	java.io.Writer.write(Writer.java:Unknown line)
	java.io.BufferedWriter.newLine(BufferedWriter.java:Unknown line)
	java.io.PrintStream.newLine(PrintStream.java:Unknown line)
TRACE 301571:
	java.io.Writer.write(Writer.java:Unknown line)
	java.io.BufferedWriter.newLine(BufferedWriter.java:Unknown line)
	java.io.PrintStream.newLine(PrintStream.java:Unknown line)
	java.io.PrintStream.println(PrintStream.java:Unknown line)
TRACE 300104:
	java.lang.AbstractStringBuilder.expandCapacity(AbstractStringBuilder.java:Unknown line)
	java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:Unknown line)
	java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:Unknown line)
	java.lang.StringBuilder.append(StringBuilder.java:Unknown line)
TRACE 301340:
	java.lang.invoke.MethodHandle.<clinit>(MethodHandle.java:Unknown line)
TRACE 301477:
	java.io.Writer.write(Writer.java:Unknown line)
	java.io.PrintStream.write(PrintStream.java:Unknown line)
	java.io.PrintStream.print(PrintStream.java:Unknown line)
	java.io.PrintStream.println(PrintStream.java:Unknown line)
TRACE 301483:
	java.nio.CharBuffer.limit(CharBuffer.java:Unknown line)
	java.nio.CharBuffer.limit(CharBuffer.java:Unknown line)
	java.nio.Buffer.<init>(Buffer.java:Unknown line)
	java.nio.CharBuffer.<init>(CharBuffer.java:Unknown line)
TRACE 301484:
	java.nio.CharBuffer.limit(CharBuffer.java:Unknown line)
	java.nio.Buffer.<init>(Buffer.java:Unknown line)
	java.nio.CharBuffer.<init>(CharBuffer.java:Unknown line)
	java.nio.HeapCharBuffer.<init>(HeapCharBuffer.java:Unknown line)
TRACE 301490:
	java.nio.HeapCharBuffer.<init>(HeapCharBuffer.java:Unknown line)
	java.nio.CharBuffer.wrap(CharBuffer.java:Unknown line)
	sun.nio.cs.StreamEncoder.implWrite(StreamEncoder.java:Unknown line)
	sun.nio.cs.StreamEncoder.write(StreamEncoder.java:Unknown line)
TRACE 301494:
	java.nio.ByteBuffer.hasArray(ByteBuffer.java:Unknown line)
	sun.nio.cs.UTF_8$Encoder.encodeLoop(UTF_8.java:Unknown line)
	java.nio.charset.CharsetEncoder.encode(CharsetEncoder.java:Unknown line)
	sun.nio.cs.StreamEncoder.implWrite(StreamEncoder.java:Unknown line)
TRACE 301497:
	java.nio.Buffer.position(Buffer.java:Unknown line)
	sun.nio.cs.UTF_8$Encoder.encodeArrayLoop(UTF_8.java:Unknown line)
	sun.nio.cs.UTF_8$Encoder.encodeLoop(UTF_8.java:Unknown line)
	java.nio.charset.CharsetEncoder.encode(CharsetEncoder.java:Unknown line)
TRACE 301498:
	java.nio.Buffer.limit(Buffer.java:Unknown line)
	sun.nio.cs.UTF_8$Encoder.encodeArrayLoop(UTF_8.java:Unknown line)
	sun.nio.cs.UTF_8$Encoder.encodeLoop(UTF_8.java:Unknown line)
	java.nio.charset.CharsetEncoder.encode(CharsetEncoder.java:Unknown line)
TRACE 301510:
	sun.nio.cs.UTF_8.updatePositions(UTF_8.java:Unknown line)
	sun.nio.cs.UTF_8.access$200(UTF_8.java:Unknown line)
	sun.nio.cs.UTF_8$Encoder.encodeArrayLoop(UTF_8.java:Unknown line)
	sun.nio.cs.UTF_8$Encoder.encodeLoop(UTF_8.java:Unknown line)
TRACE 301530:
	java.nio.charset.CharsetEncoder.encode(CharsetEncoder.java:Unknown line)
	sun.nio.cs.StreamEncoder.implWrite(StreamEncoder.java:Unknown line)
	sun.nio.cs.StreamEncoder.write(StreamEncoder.java:Unknown line)
	java.io.OutputStreamWriter.write(OutputStreamWriter.java:Unknown line)
TRACE 301536:
	java.io.BufferedWriter.flushBuffer(BufferedWriter.java:Unknown line)
	java.io.PrintStream.write(PrintStream.java:Unknown line)
	java.io.PrintStream.print(PrintStream.java:Unknown line)
	java.io.PrintStream.println(PrintStream.java:Unknown line)
TRACE 301546:
	java.io.BufferedOutputStream.write(BufferedOutputStream.java:Unknown line)
	java.io.PrintStream.write(PrintStream.java:Unknown line)
	sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:Unknown line)
	sun.nio.cs.StreamEncoder.implFlushBuffer(StreamEncoder.java:Unknown line)
TRACE 301559:
	java.io.OutputStreamWriter.flushBuffer(OutputStreamWriter.java:Unknown line)
	java.io.PrintStream.write(PrintStream.java:Unknown line)
	java.io.PrintStream.print(PrintStream.java:Unknown line)
	java.io.PrintStream.println(PrintStream.java:Unknown line)
TRACE 301601:
	java.lang.StringBuilder.<init>(StringBuilder.java:Unknown line)
	NoCompile.method1(NoCompile.java:Unknown line)
	NoCompile.main(NoCompile.java:Unknown line)
TRACE 301606:
	java.lang.StringBuilder.append(StringBuilder.java:Unknown line)
	NoCompile.method1(NoCompile.java:Unknown line)
	NoCompile.main(NoCompile.java:Unknown line)
TRACE 301663:
	java.io.OutputStreamWriter.flushBuffer(OutputStreamWriter.java:Unknown line)
	java.io.PrintStream.newLine(PrintStream.java:Unknown line)
	java.io.PrintStream.println(PrintStream.java:Unknown line)
	NoCompile.method1(NoCompile.java:Unknown line)
TRACE 301673:
	java.lang.ThreadLocal$ThreadLocalMap.getEntry(ThreadLocal.java:Unknown line)
	java.lang.ThreadLocal$ThreadLocalMap.access$000(ThreadLocal.java:Unknown line)
	java.lang.ThreadLocal.get(ThreadLocal.java:Unknown line)
	sun.misc.FloatingDecimal.getBinaryToASCIIBuffer(FloatingDecimal.java:Unknown line)
TRACE 301674:
	java.lang.ThreadLocal$ThreadLocalMap.access$000(ThreadLocal.java:Unknown line)
	java.lang.ThreadLocal.get(ThreadLocal.java:Unknown line)
	sun.misc.FloatingDecimal.getBinaryToASCIIBuffer(FloatingDecimal.java:Unknown line)
	sun.misc.FloatingDecimal.getBinaryToASCIIConverter(FloatingDecimal.java:Unknown line)
TRACE 301691:
	sun.misc.FloatingDecimal.getBinaryToASCIIBuffer(FloatingDecimal.java:Unknown line)
	sun.misc.FloatingDecimal.getBinaryToASCIIConverter(FloatingDecimal.java:Unknown line)
	sun.misc.FloatingDecimal.getBinaryToASCIIConverter(FloatingDecimal.java:Unknown line)
	sun.misc.FloatingDecimal.toJavaFormatString(FloatingDecimal.java:Unknown line)
TRACE 301708:
	sun.misc.FloatingDecimal$BinaryToASCIIBuffer.developLongDigits(FloatingDecimal.java:Unknown line)
	sun.misc.FloatingDecimal$BinaryToASCIIBuffer.dtoa(FloatingDecimal.java:Unknown line)
	sun.misc.FloatingDecimal$BinaryToASCIIBuffer.access$100(FloatingDecimal.java:Unknown line)
	sun.misc.FloatingDecimal.getBinaryToASCIIConverter(FloatingDecimal.java:Unknown line)
CPU TIME (ms) BEGIN (total = 17281) Fri Jun 19 16:34:15 2015
rank   self  accum   count trace method
   1 99.03% 99.03%     100 301719 NoCompile.method1
   2  0.05% 99.07%     800 301605 java.lang.AbstractStringBuilder.append
   3  0.04% 99.11%     404 301526 sun.nio.cs.UTF_8$Encoder.encodeArrayLoop
   4  0.03% 99.15%     404 301549 java.io.FileOutputStream.write
   5  0.03% 99.18%     404 301556 sun.nio.cs.StreamEncoder.writeBytes
   6  0.03% 99.21%     404 301533 sun.nio.cs.StreamEncoder.implWrite
   7  0.02% 99.24%     404 301527 sun.nio.cs.UTF_8$Encoder.encodeLoop
   8  0.02% 99.26%     201 301690 java.lang.ThreadLocal.get
   9  0.02% 99.28%     404 301502 java.nio.CharBuffer.arrayOffset
  10  0.02% 99.29%     202 301570 java.io.BufferedWriter.write
  11  0.02% 99.31%     202 301571 java.io.Writer.write
  12  0.01% 99.32%     327 300104 java.lang.AbstractStringBuilder.expandCapacity
  13  0.01% 99.33%       1 301340 java.lang.invoke.MethodHandle.<clinit>
  14  0.01% 99.35%     202 301477 java.io.Writer.write
  15  0.01% 99.36%     404 301483 java.nio.CharBuffer.limit
  16  0.01% 99.37%     404 301484 java.nio.CharBuffer.limit
  17  0.01% 99.38%     404 301490 java.nio.HeapCharBuffer.<init>
  18  0.01% 99.39%     404 301494 java.nio.ByteBuffer.hasArray
  19  0.01% 99.40%     808 301497 java.nio.Buffer.position
  20  0.01% 99.42%     808 301498 java.nio.Buffer.limit
  21  0.01% 99.43%     404 301510 sun.nio.cs.UTF_8.updatePositions
  22  0.01% 99.44%     404 301530 java.nio.charset.CharsetEncoder.encode
  23  0.01% 99.45%     202 301536 java.io.BufferedWriter.flushBuffer
  24  0.01% 99.46%     404 301546 java.io.BufferedOutputStream.write
  25  0.01% 99.47%     202 301559 java.io.OutputStreamWriter.flushBuffer
  26  0.01% 99.48%     200 301601 java.lang.StringBuilder.<init>
  27  0.01% 99.50%     800 301606 java.lang.StringBuilder.append
  28  0.01% 99.51%     200 301663 java.io.OutputStreamWriter.flushBuffer
  29  0.01% 99.52%     201 301673 java.lang.ThreadLocal$ThreadLocalMap.getEntry
  30  0.01% 99.53%     201 301674 java.lang.ThreadLocal$ThreadLocalMap.access$000
  31  0.01% 99.54%     201 301691 sun.misc.FloatingDecimal.getBinaryToASCIIBuffer
  32  0.01% 99.55%     200 301708 sun.misc.FloatingDecimal$BinaryToASCIIBuffer.developLongDigits
CPU TIME (ms) END
