JAVA PROFILE 1.0.1, created Mon Jun  1 17:07:26 2015

Copyright (c) 2003, 2005, Oracle and/or its affiliates. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

  - Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

  - Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

  - Neither the name of Oracle nor the names of its
    contributors may be used to endorse or promote products derived
    from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


Header for -agentlib:hprof (or -Xrunhprof) ASCII Output (JDK 5.0 JVMTI based)

WARNING!  This file format is under development, and is subject to
change without notice.

This file contains the following types of records:

THREAD START
THREAD END      mark the lifetime of Java threads

TRACE           represents a Java stack trace.  Each trace consists
                of a series of stack frames.  Other records refer to
                TRACEs to identify (1) where object allocations have
                taken place, (2) the frames in which GC roots were
                found, and (3) frequently executed methods.

HEAP DUMP       is a complete snapshot of all live objects in the Java
                heap.  Following distinctions are made:

                ROOT    root set as determined by GC
                CLS     classes 
                OBJ     instances
                ARR     arrays

SITES           is a sorted list of allocation sites.  This identifies
                the most heavily allocated object types, and the TRACE
                at which those allocations occurred.

CPU SAMPLES     is a statistical profile of program execution.  The VM
                periodically samples all running threads, and assigns
                a quantum to active TRACEs in those threads.  Entries
                in this record are TRACEs ranked by the percentage of
                total quanta they consumed; top-ranked TRACEs are
                typically hot spots in the program.

CPU TIME        is a profile of program execution obtained by measuring
                the time spent in individual methods (excluding the time
                spent in callees), as well as by counting the number of
                times each method is called. Entries in this record are
                TRACEs ranked by the percentage of total CPU time. The
                "count" field indicates the number of times each TRACE 
                is invoked.

MONITOR TIME    is a profile of monitor contention obtained by measuring
                the time spent by a thread waiting to enter a monitor.
                Entries in this record are TRACEs ranked by the percentage
                of total monitor contention time and a brief description
                of the monitor.  The "count" field indicates the number of 
                times the monitor was contended at that TRACE.

MONITOR DUMP    is a complete snapshot of all the monitors and threads in 
                the System.

HEAP DUMP, SITES, CPU SAMPLES|TIME and MONITOR DUMP|TIME records are generated 
at program exit.  They can also be obtained during program execution by typing 
Ctrl-\ (on Solaris) or by typing Ctrl-Break (on Win32).

--------

THREAD START (obj=50000173, id = 200002, name="HPROF gc_finish watcher", group="system")
THREAD START (obj=50000173, id = 200001, name="main", group="main")
THREAD END (id = 200001)
THREAD START (obj=50000173, id = 200003, name="DestroyJavaVM", group="main")
THREAD END (id = 200003)
THREAD END (id = 200002)
TRACE 301487:
	NoCompile.method1(NoCompile.java:Unknown line)
	NoCompile.main(NoCompile.java:Unknown line)
TRACE 300134:
	java.io.UnixFileSystem.normalize(UnixFileSystem.java:Unknown line)
	java.io.File.<init>(File.java:Unknown line)
	sun.misc.URLClassPath$JImageLoader.<init>(URLClassPath.java:Unknown line)
	sun.misc.URLClassPath$3.run(URLClassPath.java:Unknown line)
TRACE 300566:
	sun.misc.URLClassPath.getLoader(URLClassPath.java:Unknown line)
	sun.misc.URLClassPath.getLoader(URLClassPath.java:Unknown line)
	sun.misc.URLClassPath.getResource(URLClassPath.java:Unknown line)
	java.net.URLClassLoader$1.run(URLClassLoader.java:Unknown line)
TRACE 301272:
	java.lang.invoke.MethodHandleImpl.<clinit>(MethodHandleImpl.java:Unknown line)
	java.lang.invoke.MethodHandle.<clinit>(MethodHandle.java:Unknown line)
TRACE 301339:
	java.lang.invoke.MethodHandle.<clinit>(MethodHandle.java:Unknown line)
TRACE 300019:
	java.lang.Thread.init(Thread.java:Unknown line)
	java.lang.Thread.init(Thread.java:Unknown line)
	java.lang.Thread.<init>(Thread.java:Unknown line)
TRACE 300038:
	java.lang.String.indexOf(String.java:Unknown line)
	java.lang.ClassLoader.checkName(ClassLoader.java:Unknown line)
	java.lang.ClassLoader.findLoadedClass(ClassLoader.java:Unknown line)
	java.lang.ClassLoader.loadClass(ClassLoader.java:Unknown line)
TRACE 300040:
	java.lang.ClassLoader.checkName(ClassLoader.java:Unknown line)
	java.lang.ClassLoader.findLoadedClass(ClassLoader.java:Unknown line)
	java.lang.ClassLoader.loadClass(ClassLoader.java:Unknown line)
	sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:Unknown line)
TRACE 300109:
	sun.net.util.URLUtil.urlNoFragString(URLUtil.java:Unknown line)
	sun.misc.URLClassPath.getLoader(URLClassPath.java:Unknown line)
	sun.misc.URLClassPath.getResource(URLClassPath.java:Unknown line)
	java.net.URLClassLoader$1.run(URLClassLoader.java:Unknown line)
TRACE 300200:
	java.lang.StringCoding.decode(StringCoding.java:Unknown line)
	java.lang.String.<init>(String.java:Unknown line)
	java.lang.String.<init>(String.java:Unknown line)
	java.io.UnixFileSystem.canonicalize(UnixFileSystem.java:Unknown line)
TRACE 300248:
	java.lang.Class.getClassLoader0(Class.java:Unknown line)
	java.lang.Class.getClassLoader(Class.java:Unknown line)
	java.lang.Class.desiredAssertionStatus(Class.java:Unknown line)
	jdk.internal.jimage.BasicImageReader.<clinit>(BasicImageReader.java:Unknown line)
TRACE 300299:
	java.lang.Math.min(Math.java:Unknown line)
	java.util.Arrays.copyOf(Arrays.java:Unknown line)
	java.lang.StringCoding.safeTrim(StringCoding.java:Unknown line)
	java.lang.StringCoding.encode(StringCoding.java:Unknown line)
TRACE 300318:
	sun.misc.Unsafe.getUnsafe(Unsafe.java:Unknown line)
	jdk.internal.jimage.concurrent.ConcurrentPReader.<clinit>(ConcurrentPReader.java:Unknown line)
	java.lang.Class.forName(Class.java:Unknown line)
	jdk.internal.jimage.PReader.open(PReader.java:Unknown line)
TRACE 300350:
	java.io.File.<init>(File.java:Unknown line)
	java.lang.ClassLoader.loadLibrary(ClassLoader.java:Unknown line)
	java.lang.Runtime.loadLibrary0(Runtime.java:Unknown line)
	java.lang.System.loadLibrary(System.java:Unknown line)
TRACE 300402:
	java.lang.String.getChars(String.java:Unknown line)
	java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:Unknown line)
	java.lang.StringBuilder.append(StringBuilder.java:Unknown line)
	java.io.UnixFileSystem.canonicalize(UnixFileSystem.java:Unknown line)
TRACE 300459:
	java.lang.Class.privateGetDeclaredConstructors(Class.java:Unknown line)
	java.lang.Class.getConstructor0(Class.java:Unknown line)
	java.lang.Class.getConstructor(Class.java:Unknown line)
	jdk.internal.jimage.PReader.open(PReader.java:Unknown line)
TRACE 300494:
	java.io.UnixFileSystem.normalize(UnixFileSystem.java:Unknown line)
	java.io.File.<init>(File.java:Unknown line)
	java.io.FileInputStream.<init>(FileInputStream.java:Unknown line)
	jdk.internal.jimage.concurrent.ConcurrentPReader.<init>(ConcurrentPReader.java:Unknown line)
TRACE 300502:
	java.lang.ref.Finalizer.register(Finalizer.java:Unknown line)
	java.io.InputStream.<init>(InputStream.java:Unknown line)
	java.io.FileInputStream.<init>(FileInputStream.java:Unknown line)
	java.io.FileInputStream.<init>(FileInputStream.java:Unknown line)
TRACE 300529:
	java.lang.StringBuilder.append(StringBuilder.java:Unknown line)
	java.io.FileNotFoundException.<init>(FileNotFoundException.java:Unknown line)
	java.io.FileInputStream.open(FileInputStream.java:Unknown line)
	java.io.FileInputStream.<init>(FileInputStream.java:Unknown line)
TRACE 300567:
	sun.misc.URLClassPath.getLoader(URLClassPath.java:Unknown line)
	sun.misc.URLClassPath.getResource(URLClassPath.java:Unknown line)
	java.net.URLClassLoader$1.run(URLClassLoader.java:Unknown line)
	java.net.URLClassLoader$1.run(URLClassLoader.java:Unknown line)
TRACE 300576:
	java.net.URLClassLoader.findClass(URLClassLoader.java:Unknown line)
	java.lang.ClassLoader.loadClass(ClassLoader.java:Unknown line)
	java.lang.ClassLoader.loadClass(ClassLoader.java:Unknown line)
	sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:Unknown line)
TRACE 300604:
	java.io.ObjectStreamClass.appendClassSignature(ObjectStreamClass.java:Unknown line)
	java.io.ObjectStreamClass.getClassSignature(ObjectStreamClass.java:Unknown line)
	java.io.ObjectStreamField.<init>(ObjectStreamField.java:Unknown line)
	java.io.ObjectStreamField.<init>(ObjectStreamField.java:Unknown line)
TRACE 300633:
	java.io.File.<init>(File.java:Unknown line)
	sun.misc.URLClassPath$FileLoader.<init>(URLClassPath.java:Unknown line)
	sun.misc.URLClassPath$3.run(URLClassPath.java:Unknown line)
	sun.misc.URLClassPath$3.run(URLClassPath.java:Unknown line)
TRACE 300733:
	java.lang.Character.toLowerCase(Character.java:Unknown line)
	java.lang.Character.toLowerCase(Character.java:Unknown line)
	java.lang.String.regionMatches(String.java:Unknown line)
	java.net.URL.<init>(URL.java:Unknown line)
TRACE 300773:
	sun.misc.URLClassPath$FileLoader.getResource(URLClassPath.java:Unknown line)
	sun.misc.URLClassPath.getResource(URLClassPath.java:Unknown line)
	java.net.URLClassLoader$1.run(URLClassLoader.java:Unknown line)
	java.net.URLClassLoader$1.run(URLClassLoader.java:Unknown line)
TRACE 300793:
	sun.misc.Resource.getByteBuffer(Resource.java:Unknown line)
	java.net.URLClassLoader.defineClass(URLClassLoader.java:Unknown line)
	java.net.URLClassLoader.access$100(URLClassLoader.java:Unknown line)
	java.net.URLClassLoader$1.run(URLClassLoader.java:Unknown line)
TRACE 300830:
	sun.misc.PerfCounter.<clinit>(PerfCounter.java:Unknown line)
	java.net.URLClassLoader.defineClass(URLClassLoader.java:Unknown line)
	java.net.URLClassLoader.access$100(URLClassLoader.java:Unknown line)
	java.net.URLClassLoader$1.run(URLClassLoader.java:Unknown line)
TRACE 300847:
	java.nio.Buffer.<init>(Buffer.java:Unknown line)
	java.nio.ByteBuffer.<init>(ByteBuffer.java:Unknown line)
	java.nio.ByteBuffer.<init>(ByteBuffer.java:Unknown line)
	java.nio.MappedByteBuffer.<init>(MappedByteBuffer.java:Unknown line)
TRACE 300877:
	java.nio.DirectByteBuffer.asLongBuffer(DirectByteBuffer.java:Unknown line)
	sun.misc.PerfCounter.<init>(PerfCounter.java:Unknown line)
	sun.misc.PerfCounter.newPerfCounter(PerfCounter.java:Unknown line)
	sun.misc.PerfCounter$CoreCounters.<clinit>(PerfCounter.java:Unknown line)
TRACE 300878:
	sun.misc.PerfCounter.<init>(PerfCounter.java:Unknown line)
	sun.misc.PerfCounter.newPerfCounter(PerfCounter.java:Unknown line)
	sun.misc.PerfCounter$CoreCounters.<clinit>(PerfCounter.java:Unknown line)
	sun.misc.PerfCounter.getReadClassBytesTime(PerfCounter.java:Unknown line)
TRACE 300958:
	sun.net.www.URLConnection.<init>(URLConnection.java:Unknown line)
	sun.net.www.protocol.file.FileURLConnection.<init>(FileURLConnection.java:Unknown line)
	sun.net.www.protocol.file.Handler.createFileURLConnection(Handler.java:Unknown line)
	sun.net.www.protocol.file.Handler.openConnection(Handler.java:Unknown line)
TRACE 300960:
	sun.net.www.protocol.file.Handler.createFileURLConnection(Handler.java:Unknown line)
	sun.net.www.protocol.file.Handler.openConnection(Handler.java:Unknown line)
	sun.net.www.protocol.file.Handler.openConnection(Handler.java:Unknown line)
	java.net.URL.openConnection(URL.java:Unknown line)
TRACE 300982:
	java.io.UnixFileSystem.normalize(UnixFileSystem.java:Unknown line)
	java.io.File.<init>(File.java:Unknown line)
	java.io.FilePermission$1.run(FilePermission.java:Unknown line)
	java.io.FilePermission$1.run(FilePermission.java:Unknown line)
TRACE 301047:
	java.io.FilePermission.newPermissionCollection(FilePermission.java:Unknown line)
	java.security.Permissions.getPermissionCollection(Permissions.java:Unknown line)
	java.security.Permissions.add(Permissions.java:Unknown line)
	java.net.URLClassLoader.getPermissions(URLClassLoader.java:Unknown line)
TRACE 301086:
	java.security.BasicPermission.newPermissionCollection(BasicPermission.java:Unknown line)
	java.security.Permissions.getPermissionCollection(Permissions.java:Unknown line)
	java.security.Permissions.add(Permissions.java:Unknown line)
	sun.misc.Launcher$AppClassLoader.getPermissions(Launcher.java:Unknown line)
TRACE 301181:
	java.lang.ClassLoader.defineClass(ClassLoader.java:Unknown line)
	java.security.SecureClassLoader.defineClass(SecureClassLoader.java:Unknown line)
	java.net.URLClassLoader.defineClass(URLClassLoader.java:Unknown line)
	java.net.URLClassLoader.access$100(URLClassLoader.java:Unknown line)
TRACE 301336:
	sun.reflect.ReflectionFactory.copyField(ReflectionFactory.java:Unknown line)
	java.lang.Class.searchFields(Class.java:Unknown line)
	java.lang.Class.getDeclaredField(Class.java:Unknown line)
	java.lang.invoke.MethodHandle.<clinit>(MethodHandle.java:Unknown line)
TRACE 301439:
	java.lang.Class.getMethod0(Class.java:Unknown line)
	java.lang.Class.getMethod(Class.java:Unknown line)
	sun.launcher.LauncherHelper.validateMainClass(LauncherHelper.java:Unknown line)
	sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:Unknown line)
TRACE 301467:
	java.lang.Long.<init>(Long.java:Unknown line)
	java.lang.Long$LongCache.<clinit>(Long.java:Unknown line)
	java.lang.Long.valueOf(Long.java:Unknown line)
	NoCompile.main(NoCompile.java:Unknown line)
TRACE 301481:
	java.lang.Long.valueOf(Long.java:Unknown line)
	NoCompile.method1(NoCompile.java:Unknown line)
	NoCompile.main(NoCompile.java:Unknown line)
TRACE 301484:
	java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:Unknown line)
	java.util.ArrayList.ensureCapacityInternal(ArrayList.java:Unknown line)
	java.util.ArrayList.add(ArrayList.java:Unknown line)
	NoCompile.method1(NoCompile.java:Unknown line)
CPU TIME (ms) BEGIN (total = 1067) Mon Jun  1 17:07:27 2015
rank   self  accum   count trace method
   1 95.88% 95.88%     100 301487 NoCompile.method1
   2  0.19% 96.06%       4 300134 java.io.UnixFileSystem.normalize
   3  0.19% 96.25%       3 300566 sun.misc.URLClassPath.getLoader
   4  0.19% 96.44%       1 301272 java.lang.invoke.MethodHandleImpl.<clinit>
   5  0.19% 96.63%       1 301339 java.lang.invoke.MethodHandle.<clinit>
   6  0.09% 96.72%       6 300019 java.lang.Thread.init
   7  0.09% 96.81%      19 300038 java.lang.String.indexOf
   8  0.09% 96.91%      10 300040 java.lang.ClassLoader.checkName
   9  0.09% 97.00%       3 300109 sun.net.util.URLUtil.urlNoFragString
  10  0.09% 97.09%       3 300200 java.lang.StringCoding.decode
  11  0.09% 97.19%       1 300248 java.lang.Class.getClassLoader0
  12  0.09% 97.28%       4 300299 java.lang.Math.min
  13  0.09% 97.38%       1 300318 sun.misc.Unsafe.getUnsafe
  14  0.09% 97.47%       1 300350 java.io.File.<init>
  15  0.09% 97.56%       4 300402 java.lang.String.getChars
  16  0.09% 97.66%       2 300459 java.lang.Class.privateGetDeclaredConstructors
  17  0.09% 97.75%       2 300494 java.io.UnixFileSystem.normalize
  18  0.09% 97.84%       2 300502 java.lang.ref.Finalizer.register
  19  0.09% 97.94%      10 300529 java.lang.StringBuilder.append
  20  0.09% 98.03%       2 300567 sun.misc.URLClassPath.getLoader
  21  0.09% 98.13%       2 300576 java.net.URLClassLoader.findClass
  22  0.09% 98.22%       6 300604 java.io.ObjectStreamClass.appendClassSignature
  23  0.09% 98.31%       1 300633 java.io.File.<init>
  24  0.09% 98.41%       2 300733 java.lang.Character.toLowerCase
  25  0.09% 98.50%       1 300773 sun.misc.URLClassPath$FileLoader.getResource
  26  0.09% 98.59%       1 300793 sun.misc.Resource.getByteBuffer
  27  0.09% 98.69%       1 300830 sun.misc.PerfCounter.<clinit>
  28  0.09% 98.78%       6 300847 java.nio.Buffer.<init>
  29  0.09% 98.88%       6 300877 java.nio.DirectByteBuffer.asLongBuffer
  30  0.09% 98.97%       6 300878 sun.misc.PerfCounter.<init>
  31  0.09% 99.06%       1 300958 sun.net.www.URLConnection.<init>
  32  0.09% 99.16%       1 300960 sun.net.www.protocol.file.Handler.createFileURLConnection
  33  0.09% 99.25%       2 300982 java.io.UnixFileSystem.normalize
  34  0.09% 99.34%       1 301047 java.io.FilePermission.newPermissionCollection
  35  0.09% 99.44%       1 301086 java.security.BasicPermission.newPermissionCollection
  36  0.09% 99.53%       1 301181 java.lang.ClassLoader.defineClass
  37  0.09% 99.63%       1 301336 sun.reflect.ReflectionFactory.copyField
  38  0.09% 99.72%       1 301439 java.lang.Class.getMethod0
  39  0.09% 99.81%     256 301467 java.lang.Long.<init>
  40  0.09% 99.91%     200 301481 java.lang.Long.valueOf
  41  0.09% 100.00%     100 301484 java.util.ArrayList.ensureExplicitCapacity
CPU TIME (ms) END
