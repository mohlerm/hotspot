JAVA PROFILE 1.0.1, created Sun May 10 17:11:20 2015

Copyright (c) 2003, 2005, Oracle and/or its affiliates. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

  - Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

  - Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

  - Neither the name of Oracle nor the names of its
    contributors may be used to endorse or promote products derived
    from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


Header for -agentlib:hprof (or -Xrunhprof) ASCII Output (JDK 5.0 JVMTI based)

WARNING!  This file format is under development, and is subject to
change without notice.

This file contains the following types of records:

THREAD START
THREAD END      mark the lifetime of Java threads

TRACE           represents a Java stack trace.  Each trace consists
                of a series of stack frames.  Other records refer to
                TRACEs to identify (1) where object allocations have
                taken place, (2) the frames in which GC roots were
                found, and (3) frequently executed methods.

HEAP DUMP       is a complete snapshot of all live objects in the Java
                heap.  Following distinctions are made:

                ROOT    root set as determined by GC
                CLS     classes 
                OBJ     instances
                ARR     arrays

SITES           is a sorted list of allocation sites.  This identifies
                the most heavily allocated object types, and the TRACE
                at which those allocations occurred.

CPU SAMPLES     is a statistical profile of program execution.  The VM
                periodically samples all running threads, and assigns
                a quantum to active TRACEs in those threads.  Entries
                in this record are TRACEs ranked by the percentage of
                total quanta they consumed; top-ranked TRACEs are
                typically hot spots in the program.

CPU TIME        is a profile of program execution obtained by measuring
                the time spent in individual methods (excluding the time
                spent in callees), as well as by counting the number of
                times each method is called. Entries in this record are
                TRACEs ranked by the percentage of total CPU time. The
                "count" field indicates the number of times each TRACE 
                is invoked.

MONITOR TIME    is a profile of monitor contention obtained by measuring
                the time spent by a thread waiting to enter a monitor.
                Entries in this record are TRACEs ranked by the percentage
                of total monitor contention time and a brief description
                of the monitor.  The "count" field indicates the number of 
                times the monitor was contended at that TRACE.

MONITOR DUMP    is a complete snapshot of all the monitors and threads in 
                the System.

HEAP DUMP, SITES, CPU SAMPLES|TIME and MONITOR DUMP|TIME records are generated 
at program exit.  They can also be obtained during program execution by typing 
Ctrl-\ (on Solaris) or by typing Ctrl-Break (on Win32).

--------

THREAD START (obj=50000173, id = 200002, name="HPROF gc_finish watcher", group="system")
THREAD START (obj=50000173, id = 200001, name="main", group="main")
THREAD END (id = 200001)
THREAD START (obj=50000173, id = 200003, name="DestroyJavaVM", group="main")
THREAD END (id = 200003)
TRACE 301486:
	ManyDeopt.method1(ManyDeopt.java:Unknown line)
	ManyDeopt.main(ManyDeopt.java:Unknown line)
TRACE 301339:
	java.lang.invoke.MethodHandle.<clinit>(MethodHandle.java:Unknown line)
TRACE 300133:
	java.lang.String.charAt(String.java:Unknown line)
	java.io.UnixFileSystem.normalize(UnixFileSystem.java:Unknown line)
	java.io.File.<init>(File.java:Unknown line)
	sun.misc.URLClassPath$JImageLoader.<init>(URLClassPath.java:Unknown line)
TRACE 300878:
	sun.misc.PerfCounter.<init>(PerfCounter.java:Unknown line)
	sun.misc.PerfCounter.newPerfCounter(PerfCounter.java:Unknown line)
	sun.misc.PerfCounter$CoreCounters.<clinit>(PerfCounter.java:Unknown line)
	sun.misc.PerfCounter.getReadClassBytesTime(PerfCounter.java:Unknown line)
TRACE 300960:
	sun.net.www.protocol.file.Handler.createFileURLConnection(Handler.java:Unknown line)
	sun.net.www.protocol.file.Handler.openConnection(Handler.java:Unknown line)
	sun.net.www.protocol.file.Handler.openConnection(Handler.java:Unknown line)
	java.net.URL.openConnection(URL.java:Unknown line)
TRACE 300562:
	sun.misc.URLClassPath$JImageLoader.<init>(URLClassPath.java:Unknown line)
	sun.misc.URLClassPath$3.run(URLClassPath.java:Unknown line)
	sun.misc.URLClassPath$3.run(URLClassPath.java:Unknown line)
	sun.misc.URLClassPath.getLoader(URLClassPath.java:Unknown line)
TRACE 300134:
	java.io.UnixFileSystem.normalize(UnixFileSystem.java:Unknown line)
	java.io.File.<init>(File.java:Unknown line)
	sun.misc.URLClassPath$JImageLoader.<init>(URLClassPath.java:Unknown line)
	sun.misc.URLClassPath$3.run(URLClassPath.java:Unknown line)
TRACE 301272:
	java.lang.invoke.MethodHandleImpl.<clinit>(MethodHandleImpl.java:Unknown line)
	java.lang.invoke.MethodHandle.<clinit>(MethodHandle.java:Unknown line)
TRACE 300563:
	sun.misc.URLClassPath$3.run(URLClassPath.java:Unknown line)
	sun.misc.URLClassPath$3.run(URLClassPath.java:Unknown line)
	sun.misc.URLClassPath.getLoader(URLClassPath.java:Unknown line)
	sun.misc.URLClassPath.getLoader(URLClassPath.java:Unknown line)
TRACE 300877:
	java.nio.DirectByteBuffer.asLongBuffer(DirectByteBuffer.java:Unknown line)
	sun.misc.PerfCounter.<init>(PerfCounter.java:Unknown line)
	sun.misc.PerfCounter.newPerfCounter(PerfCounter.java:Unknown line)
	sun.misc.PerfCounter$CoreCounters.<clinit>(PerfCounter.java:Unknown line)
TRACE 301425:
	java.lang.Class.privateGetDeclaredMethods(Class.java:Unknown line)
	java.lang.Class.privateGetMethodRecursive(Class.java:Unknown line)
	java.lang.Class.getMethod0(Class.java:Unknown line)
	java.lang.Class.getMethod(Class.java:Unknown line)
TRACE 300180:
	java.lang.StringCoding$StringEncoder.encode(StringCoding.java:Unknown line)
	java.lang.StringCoding.encode(StringCoding.java:Unknown line)
	java.lang.String.getBytes(String.java:Unknown line)
	java.io.UnixFileSystem.canonicalize(UnixFileSystem.java:Unknown line)
TRACE 300327:
	java.lang.String.charAt(String.java:Unknown line)
	java.io.UnixFileSystem.normalize(UnixFileSystem.java:Unknown line)
	java.io.File.<init>(File.java:Unknown line)
	java.lang.ClassLoader.loadLibrary(ClassLoader.java:Unknown line)
TRACE 300494:
	java.io.UnixFileSystem.normalize(UnixFileSystem.java:Unknown line)
	java.io.File.<init>(File.java:Unknown line)
	java.io.FileInputStream.<init>(FileInputStream.java:Unknown line)
	jdk.internal.jimage.concurrent.ConcurrentPReader.<init>(ConcurrentPReader.java:Unknown line)
TRACE 300544:
	java.io.FileInputStream.open(FileInputStream.java:Unknown line)
	java.io.FileInputStream.<init>(FileInputStream.java:Unknown line)
	java.io.FileInputStream.<init>(FileInputStream.java:Unknown line)
	jdk.internal.jimage.concurrent.ConcurrentPReader.<init>(ConcurrentPReader.java:Unknown line)
TRACE 300576:
	java.net.URLClassLoader.findClass(URLClassLoader.java:Unknown line)
	java.lang.ClassLoader.loadClass(ClassLoader.java:Unknown line)
	java.lang.ClassLoader.loadClass(ClassLoader.java:Unknown line)
	sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:Unknown line)
TRACE 301181:
	java.lang.ClassLoader.defineClass(ClassLoader.java:Unknown line)
	java.security.SecureClassLoader.defineClass(SecureClassLoader.java:Unknown line)
	java.net.URLClassLoader.defineClass(URLClassLoader.java:Unknown line)
	java.net.URLClassLoader.access$100(URLClassLoader.java:Unknown line)
TRACE 301479:
	java.lang.Long.<init>(Long.java:Unknown line)
	java.lang.Long.valueOf(Long.java:Unknown line)
	ManyDeopt.method1(ManyDeopt.java:Unknown line)
	ManyDeopt.main(ManyDeopt.java:Unknown line)
TRACE 300033:
	java.util.concurrent.ConcurrentHashMap.putVal(ConcurrentHashMap.java:Unknown line)
	java.util.concurrent.ConcurrentHashMap.putIfAbsent(ConcurrentHashMap.java:Unknown line)
	java.lang.ClassLoader.getClassLoadingLock(ClassLoader.java:Unknown line)
	java.lang.ClassLoader.loadClass(ClassLoader.java:Unknown line)
TRACE 300038:
	java.lang.String.indexOf(String.java:Unknown line)
	java.lang.ClassLoader.checkName(ClassLoader.java:Unknown line)
	java.lang.ClassLoader.findLoadedClass(ClassLoader.java:Unknown line)
	java.lang.ClassLoader.loadClass(ClassLoader.java:Unknown line)
TRACE 300050:
	java.lang.ClassLoader.checkName(ClassLoader.java:Unknown line)
	java.lang.ClassLoader.findBootstrapClassOrNull(ClassLoader.java:Unknown line)
	java.lang.ClassLoader.loadClass(ClassLoader.java:Unknown line)
	java.lang.ClassLoader.loadClass(ClassLoader.java:Unknown line)
TRACE 300053:
	java.lang.ClassLoader.loadClass(ClassLoader.java:Unknown line)
	sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:Unknown line)
	java.lang.ClassLoader.loadClass(ClassLoader.java:Unknown line)
TRACE 300308:
	jdk.internal.jimage.ImageReader.<clinit>(ImageReader.java:Unknown line)
	sun.misc.URLClassPath$JImageLoader.<init>(URLClassPath.java:Unknown line)
	sun.misc.URLClassPath$3.run(URLClassPath.java:Unknown line)
	sun.misc.URLClassPath$3.run(URLClassPath.java:Unknown line)
TRACE 300328:
	java.io.UnixFileSystem.normalize(UnixFileSystem.java:Unknown line)
	java.io.File.<init>(File.java:Unknown line)
	java.lang.ClassLoader.loadLibrary(ClassLoader.java:Unknown line)
	java.lang.Runtime.loadLibrary0(Runtime.java:Unknown line)
TRACE 300447:
	java.lang.Class.forName(Class.java:Unknown line)
	jdk.internal.jimage.PReader.open(PReader.java:Unknown line)
	jdk.internal.jimage.BasicImageReader.<init>(BasicImageReader.java:Unknown line)
	jdk.internal.jimage.ImageReader.<init>(ImageReader.java:Unknown line)
TRACE 300557:
	jdk.internal.jimage.PReader.open(PReader.java:Unknown line)
	jdk.internal.jimage.BasicImageReader.<init>(BasicImageReader.java:Unknown line)
	jdk.internal.jimage.ImageReader.<init>(ImageReader.java:Unknown line)
	jdk.internal.jimage.ImageReader.open(ImageReader.java:Unknown line)
TRACE 300558:
	jdk.internal.jimage.BasicImageReader.<init>(BasicImageReader.java:Unknown line)
	jdk.internal.jimage.ImageReader.<init>(ImageReader.java:Unknown line)
	jdk.internal.jimage.ImageReader.open(ImageReader.java:Unknown line)
	jdk.internal.jimage.ImageReader.open(ImageReader.java:Unknown line)
TRACE 300567:
	sun.misc.URLClassPath.getLoader(URLClassPath.java:Unknown line)
	sun.misc.URLClassPath.getResource(URLClassPath.java:Unknown line)
	java.net.URLClassLoader$1.run(URLClassLoader.java:Unknown line)
	java.net.URLClassLoader$1.run(URLClassLoader.java:Unknown line)
TRACE 300608:
	java.io.ObjectStreamClass.getClassSignature(ObjectStreamClass.java:Unknown line)
	java.io.ObjectStreamField.<init>(ObjectStreamField.java:Unknown line)
	java.io.ObjectStreamField.<init>(ObjectStreamField.java:Unknown line)
	java.lang.StringBuffer.<clinit>(StringBuffer.java:Unknown line)
TRACE 300628:
	java.io.UnixFileSystem.normalize(UnixFileSystem.java:Unknown line)
	java.io.UnixFileSystem.normalize(UnixFileSystem.java:Unknown line)
	java.io.File.<init>(File.java:Unknown line)
	sun.misc.URLClassPath$FileLoader.<init>(URLClassPath.java:Unknown line)
TRACE 300629:
	java.io.UnixFileSystem.normalize(UnixFileSystem.java:Unknown line)
	java.io.File.<init>(File.java:Unknown line)
	sun.misc.URLClassPath$FileLoader.<init>(URLClassPath.java:Unknown line)
	sun.misc.URLClassPath$3.run(URLClassPath.java:Unknown line)
TRACE 300714:
	java.net.URL.<init>(URL.java:Unknown line)
	java.net.URL.<init>(URL.java:Unknown line)
	sun.misc.URLClassPath$FileLoader.getResource(URLClassPath.java:Unknown line)
	sun.misc.URLClassPath.getResource(URLClassPath.java:Unknown line)
TRACE 300828:
	sun.misc.Perf$GetPerfAction.run(Perf.java:Unknown line)
	sun.misc.Perf$GetPerfAction.run(Perf.java:Unknown line)
	sun.misc.PerfCounter.<clinit>(PerfCounter.java:Unknown line)
	java.net.URLClassLoader.defineClass(URLClassLoader.java:Unknown line)
TRACE 300850:
	java.nio.ByteBuffer.<init>(ByteBuffer.java:Unknown line)
	java.nio.MappedByteBuffer.<init>(MappedByteBuffer.java:Unknown line)
	java.nio.DirectByteBuffer.<init>(DirectByteBuffer.java:Unknown line)
	sun.misc.PerfCounter.<init>(PerfCounter.java:Unknown line)
TRACE 300926:
	java.security.SecureClassLoader.getPermissions(SecureClassLoader.java:Unknown line)
	java.net.URLClassLoader.getPermissions(URLClassLoader.java:Unknown line)
	sun.misc.Launcher$AppClassLoader.getPermissions(Launcher.java:Unknown line)
	java.security.SecureClassLoader.getProtectionDomain(SecureClassLoader.java:Unknown line)
TRACE 300958:
	sun.net.www.URLConnection.<init>(URLConnection.java:Unknown line)
	sun.net.www.protocol.file.FileURLConnection.<init>(FileURLConnection.java:Unknown line)
	sun.net.www.protocol.file.Handler.createFileURLConnection(Handler.java:Unknown line)
	sun.net.www.protocol.file.Handler.openConnection(Handler.java:Unknown line)
TRACE 300982:
	java.io.UnixFileSystem.normalize(UnixFileSystem.java:Unknown line)
	java.io.File.<init>(File.java:Unknown line)
	java.io.FilePermission$1.run(FilePermission.java:Unknown line)
	java.io.FilePermission$1.run(FilePermission.java:Unknown line)
TRACE 301001:
	sun.net.www.protocol.file.FileURLConnection.getPermission(FileURLConnection.java:Unknown line)
	java.net.URLClassLoader.getPermissions(URLClassLoader.java:Unknown line)
	sun.misc.Launcher$AppClassLoader.getPermissions(Launcher.java:Unknown line)
	java.security.SecureClassLoader.getProtectionDomain(SecureClassLoader.java:Unknown line)
TRACE 301047:
	java.io.FilePermission.newPermissionCollection(FilePermission.java:Unknown line)
	java.security.Permissions.getPermissionCollection(Permissions.java:Unknown line)
	java.security.Permissions.add(Permissions.java:Unknown line)
	java.net.URLClassLoader.getPermissions(URLClassLoader.java:Unknown line)
TRACE 301063:
	java.security.Permissions.add(Permissions.java:Unknown line)
	java.net.URLClassLoader.getPermissions(URLClassLoader.java:Unknown line)
	sun.misc.Launcher$AppClassLoader.getPermissions(Launcher.java:Unknown line)
	java.security.SecureClassLoader.getProtectionDomain(SecureClassLoader.java:Unknown line)
TRACE 301086:
	java.security.BasicPermission.newPermissionCollection(BasicPermission.java:Unknown line)
	java.security.Permissions.getPermissionCollection(Permissions.java:Unknown line)
	java.security.Permissions.add(Permissions.java:Unknown line)
	sun.misc.Launcher$AppClassLoader.getPermissions(Launcher.java:Unknown line)
TRACE 301183:
	java.net.URLClassLoader.defineClass(URLClassLoader.java:Unknown line)
	java.net.URLClassLoader.access$100(URLClassLoader.java:Unknown line)
	java.net.URLClassLoader$1.run(URLClassLoader.java:Unknown line)
	java.net.URLClassLoader$1.run(URLClassLoader.java:Unknown line)
TRACE 301439:
	java.lang.Class.getMethod0(Class.java:Unknown line)
	java.lang.Class.getMethod(Class.java:Unknown line)
	sun.launcher.LauncherHelper.validateMainClass(LauncherHelper.java:Unknown line)
	sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:Unknown line)
TRACE 301481:
	java.lang.Long.longValue(Long.java:Unknown line)
	ManyDeopt.method1(ManyDeopt.java:Unknown line)
	ManyDeopt.main(ManyDeopt.java:Unknown line)
TRACE 301484:
	java.util.ArrayList.ensureCapacityInternal(ArrayList.java:Unknown line)
	java.util.ArrayList.add(ArrayList.java:Unknown line)
	ManyDeopt.method1(ManyDeopt.java:Unknown line)
	ManyDeopt.main(ManyDeopt.java:Unknown line)
CPU TIME (ms) BEGIN (total = 18035) Sun May 10 17:11:38 2015
rank   self  accum   count trace method
   1 98.49% 98.49%     100 301486 ManyDeopt.method1
   2  0.05% 98.54%       1 301339 java.lang.invoke.MethodHandle.<clinit>
   3  0.04% 98.59%     492 300133 java.lang.String.charAt
   4  0.04% 98.63%       6 300878 sun.misc.PerfCounter.<init>
   5  0.04% 98.67%       1 300960 sun.net.www.protocol.file.Handler.createFileURLConnection
   6  0.03% 98.71%       2 300562 sun.misc.URLClassPath$JImageLoader.<init>
   7  0.03% 98.74%       4 300134 java.io.UnixFileSystem.normalize
   8  0.03% 98.76%       1 301272 java.lang.invoke.MethodHandleImpl.<clinit>
   9  0.02% 98.79%       3 300563 sun.misc.URLClassPath$3.run
  10  0.02% 98.81%       6 300877 java.nio.DirectByteBuffer.asLongBuffer
  11  0.02% 98.83%       1 301425 java.lang.Class.privateGetDeclaredMethods
  12  0.02% 98.85%       3 300180 java.lang.StringCoding$StringEncoder.encode
  13  0.02% 98.86%     128 300327 java.lang.String.charAt
  14  0.02% 98.88%       2 300494 java.io.UnixFileSystem.normalize
  15  0.02% 98.90%       2 300544 java.io.FileInputStream.open
  16  0.02% 98.91%       2 300576 java.net.URLClassLoader.findClass
  17  0.02% 98.93%       1 301181 java.lang.ClassLoader.defineClass
  18  0.02% 98.95%     200 301479 java.lang.Long.<init>
  19  0.01% 98.96%      19 300033 java.util.concurrent.ConcurrentHashMap.putVal
  20  0.01% 98.97%      19 300038 java.lang.String.indexOf
  21  0.01% 98.98%       9 300050 java.lang.ClassLoader.checkName
  22  0.01% 98.99%       6 300053 java.lang.ClassLoader.loadClass
  23  0.01% 99.00%       1 300308 jdk.internal.jimage.ImageReader.<clinit>
  24  0.01% 99.01%       2 300328 java.io.UnixFileSystem.normalize
  25  0.01% 99.02%       2 300447 java.lang.Class.forName
  26  0.01% 99.04%       2 300557 jdk.internal.jimage.PReader.open
  27  0.01% 99.05%       2 300558 jdk.internal.jimage.BasicImageReader.<init>
  28  0.01% 99.06%       2 300567 sun.misc.URLClassPath.getLoader
  29  0.01% 99.07%       3 300608 java.io.ObjectStreamClass.getClassSignature
  30  0.01% 99.08%       1 300628 java.io.UnixFileSystem.normalize
  31  0.01% 99.09%       1 300629 java.io.UnixFileSystem.normalize
  32  0.01% 99.10%       2 300714 java.net.URL.<init>
  33  0.01% 99.11%       1 300828 sun.misc.Perf$GetPerfAction.run
  34  0.01% 99.12%       6 300850 java.nio.ByteBuffer.<init>
  35  0.01% 99.14%       1 300926 java.security.SecureClassLoader.getPermissions
  36  0.01% 99.15%       1 300958 sun.net.www.URLConnection.<init>
  37  0.01% 99.16%       2 300982 java.io.UnixFileSystem.normalize
  38  0.01% 99.17%       1 301001 sun.net.www.protocol.file.FileURLConnection.getPermission
  39  0.01% 99.18%       1 301047 java.io.FilePermission.newPermissionCollection
  40  0.01% 99.19%       1 301063 java.security.Permissions.add
  41  0.01% 99.20%       1 301086 java.security.BasicPermission.newPermissionCollection
  42  0.01% 99.21%       1 301183 java.net.URLClassLoader.defineClass
  43  0.01% 99.22%       1 301439 java.lang.Class.getMethod0
  44  0.01% 99.23%     100 301481 java.lang.Long.longValue
  45  0.01% 99.25%     100 301484 java.util.ArrayList.ensureCapacityInternal
CPU TIME (ms) END
